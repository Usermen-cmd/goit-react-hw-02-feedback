{"version":3,"sources":["styles/feedback.js","styles/statistic.js","components/Statistic/Statistic.jsx","styles/buttons.js","components/Buttons/Buttons.jsx","components/Feedback.jsx","components/ThemeButton/ThemeButton.jsx","styles/theme.js","App.jsx","index.js"],"names":["Header","theme","headerColor","Container","background","Paragraph","textColor","Statistic","states","labelsParagraph","Object","keys","map","label","Button","Buttons","handler","type","onClick","Feedback","state","good","neutral","bad","onButtonHandler","e","labelBtn","currentTarget","textContent","toLowerCase","setState","prevState","createNotification","NotificationManager","success","countTotalFeedback","feedbacks","values","reduce","acc","num","countPositiveFeedbackPercentage","persentage","Math","floor","this","feedbacksTotal","positiveFeedbacks","props","children","Component","ThemeButton","onSwitchCheched","isChecked","Switch","color","onChange","checked","THEME","light","dark","App","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.153d77a9.chunk.js","sourcesContent":["import css from '@emotion/styled/macro';\r\n\r\nconst Header = css.h2`\r\ntext-align: center;\r\ncolor: ${({ theme }) => theme.headerColor};\r\n  svg{\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n\r\nconst Container = css.div`\r\nbackground-color: ${({ theme }) => theme.background};\r\ndiv{\r\n  padding: 30px 0;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n}\r\n`;\r\n\r\nexport { Header, Container };\r\n","import css from '@emotion/styled/macro';\r\n\r\nconst Header = css.h3`\r\ncolor: ${({ theme }) => theme.headerColor};\r\nmargin-bottom: 10px;\r\n`;\r\n\r\nconst Paragraph = css.p`\r\ncolor: ${({ theme }) => theme.textColor};\r\nfont-weight: 500;\r\n`;\r\n\r\nconst Container = css.div`\r\ntext-align: center;\r\n`;\r\n\r\nexport { Header, Paragraph, Container };\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { Header, Paragraph, Container } from 'styles/statistic';\r\n\r\nconst Statistic = ({ states }) => {\r\n  const labelsParagraph = Object.keys(states);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>Statistic</Header>\r\n      {labelsParagraph.map(label => {\r\n        return (\r\n          <Paragraph key={`${label}-id-statistic`}>\r\n            {label}: {states[label]}\r\n          </Paragraph>\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nStatistic.propTypes = {\r\n  states: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    'Total feedbacks': PropTypes.number,\r\n    'Positive feedbacks': PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.number,\r\n    ]),\r\n  }),\r\n};\r\n\r\nexport default Statistic;\r\n","import css from '@emotion/styled/macro';\r\n\r\nconst Button = css.button`\r\nbackground-color: #4141f5;\r\npadding: 5px 20px;\r\nborder-radius: 20px;\r\ncolor: #e2dbdb;\r\nfont-size: 14px;\r\nfont-weight: 500;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder: none;\r\ncursor: pointer;\r\nbox-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2) inset;\r\ntransition: transform 100ms linear 100ms;\r\n\r\n\r\n  &:hover{\r\ncolor: #fff;\r\ntransform: scale(1.1);\r\nbackground-color: #3b3be0;\r\nbox-shadow: -5px -5px 5px -5px rgba(34, 60, 80, 0.6) inset;\r\n}\r\n\r\n  svg{\r\nmargin-right: 10px;\r\nwidth: 20px;\r\nheight: auto;\r\n}\r\n`;\r\nconst Container = css.div`\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-around;\r\npadding: 15px 0;\r\n`;\r\n\r\nexport { Button, Container };\r\n","import PropTypes from 'prop-types';\r\nimport { CgSmile, CgSmileNone, CgSmileSad } from 'react-icons/cg';\r\nimport { Button, Container } from 'styles/buttons';\r\n\r\nconst Buttons = ({ handler }) => {\r\n  return (\r\n    <Container>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmile />\r\n        Good\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmileNone />\r\n        Neutral\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmileSad />\r\n        Bad\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nButtons.propTypes = {\r\n  handler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Buttons;\r\n","import { Component } from 'react';\r\nimport { VscFeedback } from 'react-icons/vsc';\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from 'react-notifications';\r\nimport { Header, Container } from 'styles/feedback';\r\nimport Statistic from 'components/Statistic/Statistic';\r\nimport Buttons from 'components/Buttons/Buttons';\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onButtonHandler = e => {\r\n    const labelBtn = e.currentTarget.textContent.toLowerCase();\r\n    this.setState(prevState => ({ [labelBtn]: prevState[labelBtn] + 1 }));\r\n    this.createNotification();\r\n  };\r\n\r\n  createNotification = () => {\r\n    NotificationManager.success(\r\n      '',\r\n      'Thank you for your feedback.',\r\n      500,\r\n      null,\r\n      true,\r\n    );\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const feedbacksArray = Object.values(this.state);\r\n    const feedbacks = feedbacksArray.reduce((acc, num) => (acc += num), 0);\r\n    return feedbacks ? feedbacks : null;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = (good, bad) => {\r\n    const persentage = Math.floor((good / (good + bad)) * 100);\r\n    return persentage ? persentage + '%' : 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const feedbacksTotal = this.countTotalFeedback();\r\n    const positiveFeedbacks = this.countPositiveFeedbackPercentage(good, bad);\r\n\r\n    return (\r\n      <>\r\n        <NotificationContainer />\r\n        <Container>\r\n          {this.props.children}\r\n          <div>\r\n            <Header>\r\n              Please leave feedback <VscFeedback />\r\n            </Header>\r\n            <Buttons handler={this.onButtonHandler} />\r\n            {feedbacksTotal && (\r\n              <Statistic\r\n                states={{\r\n                  good,\r\n                  neutral,\r\n                  bad,\r\n                  'Total feedbacks': feedbacksTotal,\r\n                  'Positive feedbacks': positiveFeedbacks,\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import { Switch } from '@material-ui/core';\r\n\r\nconst ThemeButton = ({ onSwitchCheched, isChecked }) => {\r\n  return (\r\n    <Switch color=\"primary\" onChange={onSwitchCheched} checked={isChecked} />\r\n  );\r\n};\r\n\r\nexport default ThemeButton;\r\n","const THEME = {\r\n  light: {\r\n    background: '#ccc',\r\n    headerColor: '#4f4f4f',\r\n    textColor: '#3f3f3f',\r\n  },\r\n  dark: {\r\n    background: '#333',\r\n    headerColor: '#adaaaa',\r\n    textColor: '#f0e4e4',\r\n  },\r\n};\r\nexport default THEME;\r\n","import Feedback from 'components/Feedback';\r\nimport ThemeButton from 'components/ThemeButton/ThemeButton';\r\nimport THEME from 'styles/theme';\r\nimport { Component } from 'react';\r\nimport { ThemeProvider } from '@emotion/react';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isChecked: localStorage.getItem('theme') === 'dark',\r\n  };\r\n\r\n  onSwitchCheched = e => {\r\n    const theme = e.currentTarget.checked ? 'dark' : 'light';\r\n    this.setState(prevState => {\r\n      return { isChecked: !prevState.isChecked };\r\n    });\r\n    localStorage.setItem('theme', theme);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={this.state.isChecked ? THEME.dark : THEME.light}>\r\n        <Feedback>\r\n          <ThemeButton\r\n            onSwitchCheched={this.onSwitchCheched}\r\n            isChecked={this.state.isChecked}\r\n          />\r\n        </Feedback>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}