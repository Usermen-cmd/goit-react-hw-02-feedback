{"version":3,"sources":["components/Statistic/Statistic.jsx","components/Buttons/Buttons.jsx","components/Feedback.jsx","App.jsx","index.js"],"names":["Statistic","states","labelsParagraph","Object","keys","map","label","className","Button","css","button","Buttons","handler","type","onClick","Header","h2","Feedback","state","good","neutral","bad","onButtonHandler","e","labelBtn","currentTarget","textContent","toLowerCase","setState","prevState","countTotalFeedback","feedbacks","values","reduce","acc","num","countPositiveFeedbackPercentage","persentage","Math","floor","this","feedbacksTotal","positiveFeedbacks","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAiBeA,EAjBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAkBC,OAAOC,KAAKH,GAEpC,OACE,gCACE,2CACCC,EAAgBG,KAAI,SAAAC,GACnB,OACE,oBAAGC,UAAU,eAAb,UACGD,EADH,KACYL,EAAOK,KADnB,UAAoCA,EAApC,yB,OCLJE,EAASC,IAAIC,OAAP,gjBAgDGC,EAnBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,gCACE,eAACJ,EAAD,CAAQK,KAAK,SAASC,QAASF,EAASL,UAAU,SAAlD,UACE,cAAC,IAAD,IADF,UAIA,eAACC,EAAD,CAAQK,KAAK,SAASC,QAASF,EAASL,UAAU,SAAlD,UACE,cAAC,IAAD,IADF,aAIA,eAACC,EAAD,CAAQK,KAAK,SAASC,QAASF,EAASL,UAAU,SAAlD,UACE,cAAC,IAAD,IADF,aCrCAQ,EAASN,IAAIO,GAAP,wGA0DGC,E,4MAjDbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,gBAAkB,SAAAC,GAChB,IAAMC,EAAWD,EAAEE,cAAcC,YAAYC,cAC7C,EAAKC,UAAS,SAAAC,GAAS,sBAAQL,EAAWK,EAAUL,GAAY,O,EAGlEM,mBAAqB,WACnB,IACMC,EADiB5B,OAAO6B,OAAO,EAAKd,OACTe,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,GACpE,OAAOJ,GAAwB,M,EAGjCK,gCAAkC,SAACjB,EAAME,GACvC,IAAMgB,EAAaC,KAAKC,MAAOpB,GAAQA,EAAOE,GAAQ,KACtD,OAAOgB,EAAaA,EAAa,IAAM,G,4CAGzC,WACE,MAA+BG,KAAKtB,MAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBoB,EAAiBD,KAAKV,qBACtBY,EAAoBF,KAAKJ,gCAAgCjB,EAAME,GAErE,OACE,sBAAKd,UAAU,kBAAf,UACE,eAACQ,EAAD,oCACwB,cAAC,IAAD,OAExB,cAAC,EAAD,CAASH,QAAS4B,KAAKlB,kBACtBmB,GACC,cAAC,EAAD,CACExC,OAAQ,CACNkB,OACAC,UACAC,MACA,kBAAmBoB,EACnB,qBAAsBC,Y,GAzCbC,aCJRC,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1f3f3331.chunk.js","sourcesContent":["const Statistic = ({ states }) => {\r\n  const labelsParagraph = Object.keys(states);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Statistic</h3>\r\n      {labelsParagraph.map(label => {\r\n        return (\r\n          <p className=\"feedBackItem\" key={`${label}-id-statistic`}>\r\n            {label}: {states[label]}\r\n          </p>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","import { CgSmile, CgSmileNone, CgSmileSad } from 'react-icons/cg';\r\nimport css from '@emotion/styled';\r\n\r\nconst Button = css.button`\r\nbackground-color: #4141f5;\r\npadding: 5px 20px;\r\nborder-radius: 20px;\r\ncolor: #e2dbdb;\r\nfont-size: 14px;\r\nfont-weight: 500;\r\ndisplay: inline-flex;\r\nalign-items: center;\r\nborder: none;\r\ncursor: pointer;\r\nmargin-right: 10px;\r\nbox-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2) inset;\r\ntransition: transform 100ms linear 100ms;\r\n\r\n  &:hover{\r\ncolor: #fff;\r\ntransform: scale(1.1);\r\nbackground-color: #3b3be0;\r\nbox-shadow: -5px -5px 5px -5px rgba(34, 60, 80, 0.6) inset;\r\n}\r\n\r\n  svg{\r\nmargin-right: 10px;\r\nwidth: 20px;\r\nheight: auto;\r\n}\r\n`;\r\n\r\nconst Buttons = ({ handler }) => {\r\n  return (\r\n    <div>\r\n      <Button type=\"button\" onClick={handler} className=\"button\">\r\n        <CgSmile />\r\n        Good\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler} className=\"button\">\r\n        <CgSmileNone />\r\n        Neutral\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler} className=\"button\">\r\n        <CgSmileSad />\r\n        Bad\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { Component } from 'react';\r\nimport { VscFeedback } from 'react-icons/vsc';\r\nimport css from '@emotion/styled';\r\nimport Statistic from 'components/Statistic/Statistic';\r\nimport Buttons from './Buttons/Buttons';\r\n\r\nconst Header = css.h2`\r\ncolor: #4f4f4f;\r\nmargin-bottom: 15px;\r\n  svg{\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onButtonHandler = e => {\r\n    const labelBtn = e.currentTarget.textContent.toLowerCase();\r\n    this.setState(prevState => ({ [labelBtn]: prevState[labelBtn] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const feedbacksArray = Object.values(this.state);\r\n    const feedbacks = feedbacksArray.reduce((acc, num) => (acc += num), 0);\r\n    return feedbacks ? feedbacks : null;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = (good, bad) => {\r\n    const persentage = Math.floor((good / (good + bad)) * 100);\r\n    return persentage ? persentage + '%' : 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const feedbacksTotal = this.countTotalFeedback();\r\n    const positiveFeedbacks = this.countPositiveFeedbackPercentage(good, bad);\r\n\r\n    return (\r\n      <div className=\"feedBackService\">\r\n        <Header>\r\n          Please leave feedback <VscFeedback />\r\n        </Header>\r\n        <Buttons handler={this.onButtonHandler} />\r\n        {feedbacksTotal && (\r\n          <Statistic\r\n            states={{\r\n              good,\r\n              neutral,\r\n              bad,\r\n              'Total feedbacks': feedbacksTotal,\r\n              'Positive feedbacks': positiveFeedbacks,\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import Feedback from 'components/Feedback';\n\nconst App = () => {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}