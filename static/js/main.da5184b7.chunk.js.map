{"version":3,"sources":["components/styles/feedback.jsx","components/styles/statistic.jsx","components/Statistic/Statistic.jsx","components/styles/buttons.jsx","components/Buttons/Buttons.jsx","components/Feedback.jsx","App.jsx","index.js"],"names":["Header","css","h2","Container","div","h3","Paragraph","p","Statistic","states","labelsParagraph","Object","keys","map","label","Button","button","Buttons","handler","type","onClick","Feedback","state","good","neutral","bad","onButtonHandler","e","labelBtn","currentTarget","textContent","toLowerCase","setState","prevState","countTotalFeedback","feedbacks","values","reduce","acc","num","countPositiveFeedbackPercentage","persentage","Math","floor","this","feedbacksTotal","positiveFeedbacks","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAEMA,EAASC,IAAIC,GAAP,uGAQNC,EAAYF,IAAIG,IAAP,+FCRTJ,EAASC,IAAII,GAAP,mEAKNC,EAAYL,IAAIM,EAAP,gEAKTJ,EAAYF,IAAIG,IAAP,iD,OCmBAI,EA3BG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAkBC,OAAOC,KAAKH,GAEpC,OACE,eAAC,EAAD,WACE,cAAC,EAAD,wBACCC,EAAgBG,KAAI,SAAAC,GACnB,OACE,eAACR,EAAD,WACGQ,EADH,KACYL,EAAOK,KADnB,UAAmBA,EAAnB,yB,OCVJC,EAASd,IAAIe,OAAP,gjBA6BNb,EAAYF,IAAIG,IAAP,oHCJAa,EAvBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,eAAC,EAAD,WACE,eAACH,EAAD,CAAQI,KAAK,SAASC,QAASF,EAA/B,UACE,cAAC,IAAD,IADF,UAIA,eAACH,EAAD,CAAQI,KAAK,SAASC,QAASF,EAA/B,UACE,cAAC,IAAD,IADF,aAIA,eAACH,EAAD,CAAQI,KAAK,SAASC,QAASF,EAA/B,UACE,cAAC,IAAD,IADF,aC2CSG,E,4MAnDbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,gBAAkB,SAAAC,GAChB,IAAMC,EAAWD,EAAEE,cAAcC,YAAYC,cAC7C,EAAKC,UAAS,SAAAC,GAAS,sBAAQL,EAAWK,EAAUL,GAAY,O,EAGlEM,mBAAqB,WACnB,IACMC,EADiBxB,OAAOyB,OAAO,EAAKd,OACTe,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,GACpE,OAAOJ,GAAwB,M,EAGjCK,gCAAkC,SAACjB,EAAME,GACvC,IAAMgB,EAAaC,KAAKC,MAAOpB,GAAQA,EAAOE,GAAQ,KACtD,OAAOgB,EAAaA,EAAa,IAAM,G,4CAGzC,WACE,MAA+BG,KAAKtB,MAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBoB,EAAiBD,KAAKV,qBACtBY,EAAoBF,KAAKJ,gCAAgCjB,EAAME,GAErE,OACE,cAACtB,EAAD,UACE,gCACE,eAACH,EAAD,oCACwB,cAAC,IAAD,OAExB,cAAC,EAAD,CAASkB,QAAS0B,KAAKlB,kBACtBmB,GACC,cAAC,EAAD,CACEpC,OAAQ,CACNc,OACAC,UACAC,MACA,kBAAmBoB,EACnB,qBAAsBC,c,GA1CfC,aCIRC,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da5184b7.chunk.js","sourcesContent":["import css from '@emotion/styled';\r\n\r\nconst Header = css.h2`\r\ntext-align: center;\r\ncolor: #4f4f4f;\r\n  svg{\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n\r\nconst Container = css.div`\r\ndiv{\r\n  padding-top: 30px;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n}\r\n`;\r\n\r\nexport { Header, Container };\r\n","import css from '@emotion/styled';\r\n\r\nconst Header = css.h3`\r\ncolor: #4f4f4f;\r\nmargin-bottom: 10px;\r\n`;\r\n\r\nconst Paragraph = css.p`\r\ncolor: #3f3f3f;\r\nfont-weight: 500;\r\n`;\r\n\r\nconst Container = css.div`\r\ntext-align: center;\r\n`;\r\n\r\nexport { Header, Paragraph, Container };\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { Header, Paragraph, Container } from 'components/styles/statistic';\r\n\r\nconst Statistic = ({ states }) => {\r\n  const labelsParagraph = Object.keys(states);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>Statistic</Header>\r\n      {labelsParagraph.map(label => {\r\n        return (\r\n          <Paragraph key={`${label}-id-statistic`}>\r\n            {label}: {states[label]}\r\n          </Paragraph>\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nStatistic.propTypes = {\r\n  states: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    'Total feedbacks': PropTypes.number,\r\n    'Positive feedbacks': PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default Statistic;\r\n","import css from '@emotion/styled';\r\n\r\nconst Button = css.button`\r\nbackground-color: #4141f5;\r\npadding: 5px 20px;\r\nborder-radius: 20px;\r\ncolor: #e2dbdb;\r\nfont-size: 14px;\r\nfont-weight: 500;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder: none;\r\ncursor: pointer;\r\nbox-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2) inset;\r\ntransition: transform 100ms linear 100ms;\r\n\r\n\r\n  &:hover{\r\ncolor: #fff;\r\ntransform: scale(1.1);\r\nbackground-color: #3b3be0;\r\nbox-shadow: -5px -5px 5px -5px rgba(34, 60, 80, 0.6) inset;\r\n}\r\n\r\n  svg{\r\nmargin-right: 10px;\r\nwidth: 20px;\r\nheight: auto;\r\n}\r\n`;\r\nconst Container = css.div`\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-around;\r\npadding: 15px 0;\r\n`;\r\n\r\nexport { Button, Container };\r\n","import PropTypes from 'prop-types';\r\nimport { CgSmile, CgSmileNone, CgSmileSad } from 'react-icons/cg';\r\nimport { Button, Container } from 'components/styles/buttons';\r\n\r\nconst Buttons = ({ handler }) => {\r\n  return (\r\n    <Container>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmile />\r\n        Good\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmileNone />\r\n        Neutral\r\n      </Button>\r\n      <Button type=\"button\" onClick={handler}>\r\n        <CgSmileSad />\r\n        Bad\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nButtons.propTypes = {\r\n  handler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Buttons;\r\n","import { Component } from 'react';\r\nimport { VscFeedback } from 'react-icons/vsc';\r\nimport { Header, Container } from 'components/styles/feedback';\r\nimport Statistic from 'components/Statistic/Statistic';\r\nimport Buttons from 'components/Buttons/Buttons';\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onButtonHandler = e => {\r\n    const labelBtn = e.currentTarget.textContent.toLowerCase();\r\n    this.setState(prevState => ({ [labelBtn]: prevState[labelBtn] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const feedbacksArray = Object.values(this.state);\r\n    const feedbacks = feedbacksArray.reduce((acc, num) => (acc += num), 0);\r\n    return feedbacks ? feedbacks : null;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = (good, bad) => {\r\n    const persentage = Math.floor((good / (good + bad)) * 100);\r\n    return persentage ? persentage + '%' : 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const feedbacksTotal = this.countTotalFeedback();\r\n    const positiveFeedbacks = this.countPositiveFeedbackPercentage(good, bad);\r\n\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <Header>\r\n            Please leave feedback <VscFeedback />\r\n          </Header>\r\n          <Buttons handler={this.onButtonHandler} />\r\n          {feedbacksTotal && (\r\n            <Statistic\r\n              states={{\r\n                good,\r\n                neutral,\r\n                bad,\r\n                'Total feedbacks': feedbacksTotal,\r\n                'Positive feedbacks': positiveFeedbacks,\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import Feedback from 'components/Feedback';\n\nconst App = () => {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}